package org.graylog.plugins.aggregates.report;

import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

import java.io.OutputStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.graylog.plugins.aggregates.Aggregates;
import org.graylog.plugins.aggregates.history.HistoryAggregateItem;
import org.graylog.plugins.aggregates.report.schedule.ReportSchedule;
import org.graylog.plugins.aggregates.rule.Rule;
import org.jfree.chart.JFreeChart;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.Document;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

public class ReportFactory {
	private static final Logger LOG = LoggerFactory.getLogger(ReportFactory.class);
	
	public static void createReport(Map<Rule, List<HistoryAggregateItem>> series, Map<Rule, ReportSchedule> ruleScheduleMapping, Calendar cal, OutputStream outputStream, String hostname) throws ParseException {		
		List<JFreeChart> charts = new ArrayList<JFreeChart>();
		
		for (Map.Entry<Rule, List<HistoryAggregateItem>> serie : series.entrySet()){			
			charts.add(ChartFactory.generateTimeSeriesChart(serie.getKey().getName(), serie.getValue(), ruleScheduleMapping.get(serie.getKey()).getTimespan(), cal));
			LOG.debug("Adding chart \"" + serie.getKey() + "\"");
		}
				
		writeChartsToPDF(charts, 500, 200, outputStream, hostname, cal.getTime());

	}

	public static void writeChartsToPDF(List<JFreeChart> charts, int width, int height, OutputStream outputStream, String hostname, Date date) {
		PdfWriter writer = null;

		Document document = new Document();

		
		try {
			
			writer = PdfWriter.getInstance(document, outputStream);
			writer.setPageEmpty(false);
			
			
			
			document.open();
			document.setPageSize(PageSize.A4);
			document.add(new Paragraph("Aggregates Report generated by " + hostname + " on " + date.toString()));
			document.newPage();
			writer.newPage();
			
			PdfContentByte contentByte = writer.getDirectContent();
			
			PdfTemplate template;
			Graphics2D graphics2d;
			
			
			int position = 0;
			Rectangle2D rectangle2d;
			
			
			for (JFreeChart chart : charts){
				LOG.debug("Writing chart to PDF");
				if (writer.getVerticalPosition(true)-height+(height*position) < 0){
					position = 0;
					document.newPage();
					writer.newPage();					
					
				}
				template = contentByte.createTemplate(width, height);
				graphics2d = template.createGraphics(width, height, new DefaultFontMapper());
				rectangle2d = new Rectangle2D.Double(0, 0, width, height);
				chart.draw(graphics2d, rectangle2d);
				graphics2d.dispose();

				
				contentByte.addTemplate(template, 38, writer.getVerticalPosition(true)-height+(height*position));
				position--;
				
				

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		document.close();
	}

}
